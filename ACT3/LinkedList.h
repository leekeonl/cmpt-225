#pragma once
#include <iostream>
#include <vector>

using std::cout;
using std::endl;
using std::vector;

// DO NOT EDIT THIS FILE IN ANY WAY

// Node class for Linked List
class Node {
public:
	int data;
	Node* next;

	Node(int val) : data(val), next(nullptr) { ; };
	Node(int val, Node* nd) : data(val), next(nd) { ; };
};

class LinkedList
{
public:
	// Constructors and destructor
	LinkedList();
	~LinkedList();

	// Mutators
	// PARAM: val = value to be inserted
	// POST: inserts val at the front of the list
	void insert(int val);

	// PARAM: val = value to be removed from list
	// POST: removes all incidences of val from list,
	// Calls remove(Node*, int)
	void remove(int val);

	// Accessors
	bool check(const vector<int>& v);
	void print();
//    Node* remove_helper(Node *head,int k);
//    int find_k(Node *head,int val);
//    
private:
	Node* head;

	// To be completed for exercise 4
	// Recursive helper method for remove(int)
	void remove(Node* nd, int val);

	// Helper method for destructor
	void deleteList();
};
